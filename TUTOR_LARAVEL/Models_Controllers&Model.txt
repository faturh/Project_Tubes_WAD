<?php
// 1. Controllers (Logika HTTP)
// Controllers di Laravel adalah tempat utama untuk menangani logika aplikasi terkait HTTP, seperti memproses 
permintaan dari browser atau aplikasi lain dan mengembalikan respons. Controllers bertugas menghubungkan routes, models, 
dan views sehingga aplikasi Laravel dapat berjalan secara modular dan terorganisasi.

// Lokasi:
// Semua controller disimpan di folder:
// app/Http/Controllers/

// Jenis Controllers:
// Basic Controller
// Controller biasa untuk menangani logika sederhana.

// Contoh:
// php
// Copy code
namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    public function index()
    {
        return view('welcome'); // Mengembalikan tampilan 'resources/views/welcome.blade.php'
    }
}

// Resource Controller
// Digunakan untuk menangani operasi CRUD secara otomatis.

// Contoh:

// bash
// Copy code
// php artisan make:controller PostController --resource
// File PostController.php akan memiliki metode seperti:

// index() → Menampilkan semua data.
// create() → Form untuk membuat data baru.
// store() → Menyimpan data ke database.
// show($id) → Menampilkan data tertentu.
// edit($id) → Form untuk mengedit data.
// update($id) → Memperbarui data.
// destroy($id) → Menghapus data.
// Contoh:


namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;

class PostController extends Controller
{
    public function index()
    {
        $posts = Post::all();
        return view('posts.index', compact('posts')); // Kirim data ke view
    }

    public function store(Request $request)
    {
        Post::create($request->all());
        return redirect()->route('posts.index'); // Redirect setelah menyimpan
    }
}
// API Controller
// Digunakan untuk mengembalikan data JSON.

// Contoh:

// bash
// Copy code
// php artisan make:controller UserController --api
// File UserController.php akan memiliki metode serupa dengan resource controller, tetapi untuk API (tanpa view).

// Contoh:

namespace App\Http\Controllers\Api;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function index()
    {
        return response()->json(User::all()); // Mengembalikan semua data dalam bentuk JSON
    }
}
// Hubungan Controllers dengan Komponen Lain
// Routes ke Controller
// Controller terhubung ke rute melalui routes/web.php atau routes/api.php.

// Contoh di web.php:
// php
// Copy code
// use App\Http\Controllers\HomeController;

// Route::get('/', [HomeController::class, 'index']);
// Model ke Controller
// Controllers sering memanggil model untuk mengambil, menyimpan, atau memanipulasi data.

namespace App\Http\Controllers;

use App\Models\User;

class UserController extends Controller
{
    public function show($id)
    {
        $user = User::find($id); // Memanggil model
        return view('user.show', compact('user'));
    }
}
// 2. Models (Interaksi dengan Database)
// Model adalah komponen Laravel untuk berinteraksi dengan database menggunakan Eloquent ORM (Object Relational Mapping). Model merepresentasikan tabel dalam database dan menyediakan fungsi untuk membaca, menulis, atau memanipulasi data dengan sintaks yang sederhana.

// Lokasi:
// Semua model disimpan di folder:
// app/Models/

// Cara Membuat Model:
// Buat model menggunakan artisan:

// bash
// Copy code
// php artisan make:model Post
// Untuk membuat model sekaligus migrasi:

// bash
// Copy code
// php artisan make:model Post -m
// Ini akan menghasilkan dua file:

// app/Models/Post.php (Model)
// database/migrations/xxxx_xx_xx_create_posts_table.php (Migrasi)
// Struktur Model:
// Contoh Model:

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use HasFactory;

    // Tabel yang direpresentasikan oleh model
    protected $table = 'posts';

    // Kolom yang dapat diisi secara massal
    protected $fillable = ['title', 'content'];
}
// Fungsi Penting dalam Model:

// find($id) → Mengambil data berdasarkan ID.
// all() → Mengambil semua data dalam tabel.
// create($data) → Menyimpan data baru.
// update($data) → Memperbarui data.
// delete() → Menghapus data.
// Hubungan Models dengan Database
// Migrasi untuk Membuat Tabel
// Setelah membuat model, buat migrasi tabel untuk database.

// Contoh:

// bash
// Copy code
// php artisan make:migration create_posts_table
// File migrasi di database/migrations/:


use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePostsTable extends Migration
{
    public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('posts');
    }
}
// Jalankan migrasi:

// bash
// Copy code
// php artisan migrate
// Menghubungkan Model dengan Tabel
// Secara default, model Laravel akan menghubungkan nama model dengan tabel berdasarkan plural nama model.

// Model Post otomatis terhubung dengan tabel posts.
// Relasi pada Models
// One-to-One:


public function user()
{
    return $this->hasOne(User::class);
}
// One-to-Many:

public function comments()
{
    return $this->hasMany(Comment::class);
}
// Many-to-Many:


public function roles()
{
    return $this->belongsToMany(Role::class);
}
// Perbedaan Controllers dan Models
// Aspect	Controllers	/ Models
// Fungsi	Menangani logika permintaan HTTP/	Berinteraksi dengan database
// Lokasi	app/Http/Controllers/	app/Models/
// Contoh Tugas	Menampilkan tampilan, mengolah data, merespons permintaan/	CRUD data, mengatur relasi tabel, memproses query database
// Hubungan	Menggunakan model untuk memproses data/	Berkomunikasi langsung dengan database
// Dengan memahami fungsi Controllers dan Models,/ Anda dapat mengelola aplikasi Laravel secara terstruktur dan modular.